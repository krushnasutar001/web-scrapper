/**
 * Simple LinkedIn Scraper Test
 * Tests the enhanced scraping system with concurrency control
 */

const LinkedInScraper = require('./services/linkedin-scraper');
const fs = require('fs').promises;

async function testSimpleScraper() {
  console.log('üöÄ Testing Enhanced LinkedIn Scraper with Concurrency Control');
  console.log('=' .repeat(70));

  // Load cookies from the provided JSON file
  const cookiesPath = 'C:\\Users\\krush\\OneDrive\\Desktop\\Final\\linkedin-automation-saas\\sd.json';
  let cookies = [];
  
  try {
    const cookiesData = await fs.readFile(cookiesPath, 'utf8');
    cookies = JSON.parse(cookiesData);
    console.log(`‚úÖ Loaded ${cookies.length} cookies from file`);
    
    // Check for authentication cookie
    const authCookie = cookies.find(cookie => cookie.name === 'li_at');
    if (authCookie) {
      console.log('üîê Authentication cookie (li_at) found');
    } else {
      console.log('‚ö†Ô∏è No authentication cookie (li_at) found');
    }
  } catch (error) {
    console.error('‚ùå Failed to load cookies:', error.message);
    return;
  }

  // Create scraper instance with enhanced settings
  const scraper = new LinkedInScraper({
    headless: false, // Keep visible for debugging
    timeout: 60000, // 1 minute
    navigationTimeout: 90000, // 1.5 minutes  
    waitTimeout: 30000, // 30 seconds
    retryAttempts: 2, // Try up to 2 times
    retryDelay: 3000, // 3 second base delay
    maxConcurrency: 2 // Limit to 2 concurrent operations for stability
  });

  const mockAccount = {
    account_name: 'test-account',
    cookies: cookies
  };

  try {
    await scraper.initialize();
    console.log('‚úÖ Scraper initialized successfully');

    // Test single profile scraping first
    console.log('\nüß™ Testing Single Profile Scraping');
    console.log('=' .repeat(50));
    
    const testUrl = 'https://www.linkedin.com/in/williamhgates/';
    console.log(`üîó Testing URL: ${testUrl}`);

    try {
      const startTime = Date.now();
      const result = await scraper.scrapeProfile(testUrl, mockAccount);
      const duration = ((Date.now() - startTime) / 1000).toFixed(2);
      
      console.log(`\nüìä Single Profile Results:`);
      console.log(`‚è±Ô∏è Duration: ${duration}s`);
      console.log(`‚úÖ Success: ${result.success || result.status === 'success'}`);
      console.log(`üîÑ Attempts: ${result.attempt || result.attempts_made || 'N/A'}`);
      console.log(`üìÑ Status: ${result.status}`);
      
      if (result.data) {
        console.log(`üë§ Name: ${result.data.full_name || 'Not found'}`);
        console.log(`üíº Title: ${result.data.headline || 'Not found'}`);
        console.log(`üìç Location: ${result.data.location || 'Not found'}`);
      }
      
      if (result.error) {
        console.log(`‚ùå Error: ${result.error}`);
      }

      // If single scraping works, test batch processing
      if (result.success || result.status === 'success') {
        console.log('\nüöÄ Testing Batch Processing with Concurrency Control');
        console.log('=' .repeat(60));
        
        const profileUrls = [
          'https://www.linkedin.com/in/williamhgates/',
          'https://www.linkedin.com/in/jeffweiner08/'
        ];

        try {
          console.log('\nüì¶ Testing Profile Batch Processing...');
          const batchStartTime = Date.now();
          const profileResults = await scraper.scrapeBatch(profileUrls, mockAccount, 'profile');
          const batchDuration = ((Date.now() - batchStartTime) / 1000).toFixed(2);
          
          console.log(`\nüìä Profile Batch Results:`);
          console.log(`‚è±Ô∏è Total Duration: ${batchDuration}s`);
          console.log(`‚úÖ Successful: ${profileResults.filter(r => r.success).length}/${profileResults.length}`);
          
          profileResults.forEach((result, index) => {
            if (result.success) {
              console.log(`  ‚úÖ ${index + 1}. ${result.result.data?.full_name || 'Unknown'} - ${result.result.status}`);
            } else {
              console.log(`  ‚ùå ${index + 1}. ${result.url} - ${result.error}`);
            }
          });

        } catch (error) {
          console.error('‚ùå Batch processing failed:', error.message);
        }
      }

    } catch (error) {
      console.error(`‚ùå Single profile test failed:`, error.message);
      console.error(`üîç Error type: ${error.constructor.name}`);
    }

  } catch (error) {
    console.error('‚ùå Failed to initialize scraper:', error.message);
  } finally {
    try {
      await scraper.close();
      console.log('\n‚úÖ Scraper closed successfully');
      
      // Show final browser stats
      const stats = LinkedInScraper.getBrowserStats();
      console.log(`üìä Final Browser Stats: Instance=${stats.hasInstance}, RefCount=${stats.refCount}`);
      
    } catch (error) {
      console.error('‚ùå Error closing scraper:', error.message);
    }
  }

  console.log('\nüèÅ Enhanced Scraper Testing Complete!');
  console.log('üìà Features tested:');
  console.log('  ‚Ä¢ Puppeteer-extra with stealth plugin');
  console.log('  ‚Ä¢ Randomized User-Agents and viewport sizes');
  console.log('  ‚Ä¢ Enhanced cookie management with domain context');
  console.log('  ‚Ä¢ Human-like actions (scrolling, mouse movements, reading simulation)');
  console.log('  ‚Ä¢ Comprehensive retry logic with exponential backoff');
  console.log('  ‚Ä¢ Random delays throughout the process');
  console.log('  ‚Ä¢ Concurrency control with limited simultaneous operations');
  console.log('  ‚Ä¢ Batch processing with Promise.allSettled');
  console.log('  ‚Ä¢ Singleton browser pattern for resource efficiency');
}

// Run the test
testSimpleScraper().catch(console.error);
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krush\\\\OneDrive\\\\Desktop\\\\Final\\\\linkedin-automation-saas\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  token: null,\n  loading: true,\n  error: null\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGOUT: 'LOGOUT',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER'\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Load user from localStorage on app start\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const user = localStorage.getItem('user');\n        if (token && user) {\n          // Set token in API headers\n          authAPI.setAuthToken(token);\n\n          // Verify token is still valid\n          const response = await authAPI.getProfile();\n          dispatch({\n            type: AUTH_ACTIONS.LOGIN_SUCCESS,\n            payload: {\n              user: response.data.user,\n              token\n            }\n          });\n        } else {\n          dispatch({\n            type: AUTH_ACTIONS.SET_LOADING,\n            payload: false\n          });\n        }\n      } catch (error) {\n        // Token is invalid, clear storage\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        authAPI.clearAuthToken();\n        dispatch({\n          type: AUTH_ACTIONS.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    loadUser();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const response = await authAPI.login(email, password);\n      if (response.success) {\n        const {\n          user,\n          token\n        } = response.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Set token in API headers\n        authAPI.setAuthToken(token);\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: {\n            user,\n            token\n          }\n        });\n        toast.success('Login successful!');\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: response.message || 'Login failed'\n        });\n        toast.error(response.message || 'Login failed');\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: message\n      });\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const response = await authAPI.register(userData);\n      if (response.success) {\n        const {\n          user,\n          token\n        } = response.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Set token in API headers\n        authAPI.setAuthToken(token);\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: {\n            user,\n            token\n          }\n        });\n        toast.success('Registration successful!');\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: response.message || 'Registration failed'\n        });\n        toast.error(response.message || 'Registration failed');\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: message\n      });\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Call logout API\n      await authAPI.logout();\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.warn('Logout API call failed:', error);\n    } finally {\n      // Clear localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Clear API token\n      authAPI.clearAuthToken();\n\n      // Update state\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Update profile function\n  const updateProfile = async profileData => {\n    try {\n      const response = await authAPI.updateProfile(profileData);\n      if (response.success) {\n        const updatedUser = response.data.user;\n\n        // Update localStorage\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n\n        // Update state\n        dispatch({\n          type: AUTH_ACTIONS.UPDATE_USER,\n          payload: updatedUser\n        });\n        toast.success('Profile updated successfully');\n        return {\n          success: true\n        };\n      } else {\n        toast.error(response.message || 'Profile update failed');\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Profile update failed';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n\n  // Change password function\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      const response = await authAPI.changePassword(currentPassword, newPassword);\n      if (response.success) {\n        toast.success('Password changed successfully');\n        return {\n          success: true\n        };\n      } else {\n        toast.error(response.message || 'Password change failed');\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Password change failed';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n\n  // Forgot password function\n  const forgotPassword = async email => {\n    try {\n      const response = await authAPI.forgotPassword(email);\n      if (response.success) {\n        toast.success('Password reset email sent');\n        return {\n          success: true\n        };\n      } else {\n        toast.error(response.message || 'Failed to send reset email');\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const message = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to send reset email';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({\n      type: AUTH_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // Context value\n  const value = {\n    user: state.user,\n    token: state.token,\n    loading: state.loading,\n    error: state.error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    forgotPassword,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","toast","jsxDEV","_jsxDEV","initialState","user","token","loading","error","AUTH_ACTIONS","SET_LOADING","LOGIN_SUCCESS","LOGOUT","SET_ERROR","CLEAR_ERROR","UPDATE_USER","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","loadUser","localStorage","getItem","setAuthToken","response","getProfile","data","removeItem","clearAuthToken","login","email","password","success","setItem","JSON","stringify","message","_error$response","_error$response$data","register","userData","_error$response2","_error$response2$data","logout","console","warn","updateProfile","profileData","updatedUser","_error$response3","_error$response3$data","changePassword","currentPassword","newPassword","_error$response4","_error$response4$data","forgotPassword","_error$response5","_error$response5$data","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/krush/OneDrive/Desktop/Final/linkedin-automation-saas/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: null,\n  loading: true,\n  error: null,\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGOUT: 'LOGOUT',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER',\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null,\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: null,\n      };\n    case AUTH_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null,\n      };\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: { ...state.user, ...action.payload },\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = createContext();\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Load user from localStorage on app start\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const user = localStorage.getItem('user');\n        \n        if (token && user) {\n          // Set token in API headers\n          authAPI.setAuthToken(token);\n          \n          // Verify token is still valid\n          const response = await authAPI.getProfile();\n          \n          dispatch({\n            type: AUTH_ACTIONS.LOGIN_SUCCESS,\n            payload: {\n              user: response.data.user,\n              token,\n            },\n          });\n        } else {\n          dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\n        }\n      } catch (error) {\n        // Token is invalid, clear storage\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        authAPI.clearAuthToken();\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\n      \n      const response = await authAPI.login(email, password);\n      \n      if (response.success) {\n        const { user, token } = response.data;\n        \n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        // Set token in API headers\n        authAPI.setAuthToken(token);\n        \n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: { user, token },\n        });\n        \n        toast.success('Login successful!');\n        return { success: true };\n      } else {\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: response.message || 'Login failed',\n        });\n        toast.error(response.message || 'Login failed');\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Login failed';\n      dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: message });\n      toast.error(message);\n      return { success: false, message };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\n      \n      const response = await authAPI.register(userData);\n      \n      if (response.success) {\n        const { user, token } = response.data;\n        \n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        // Set token in API headers\n        authAPI.setAuthToken(token);\n        \n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: { user, token },\n        });\n        \n        toast.success('Registration successful!');\n        return { success: true };\n      } else {\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: response.message || 'Registration failed',\n        });\n        toast.error(response.message || 'Registration failed');\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Registration failed';\n      dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: message });\n      toast.error(message);\n      return { success: false, message };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Call logout API\n      await authAPI.logout();\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.warn('Logout API call failed:', error);\n    } finally {\n      // Clear localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      \n      // Clear API token\n      authAPI.clearAuthToken();\n      \n      // Update state\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\n      \n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Update profile function\n  const updateProfile = async (profileData) => {\n    try {\n      const response = await authAPI.updateProfile(profileData);\n      \n      if (response.success) {\n        const updatedUser = response.data.user;\n        \n        // Update localStorage\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        \n        // Update state\n        dispatch({\n          type: AUTH_ACTIONS.UPDATE_USER,\n          payload: updatedUser,\n        });\n        \n        toast.success('Profile updated successfully');\n        return { success: true };\n      } else {\n        toast.error(response.message || 'Profile update failed');\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Profile update failed';\n      toast.error(message);\n      return { success: false, message };\n    }\n  };\n\n  // Change password function\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      const response = await authAPI.changePassword(currentPassword, newPassword);\n      \n      if (response.success) {\n        toast.success('Password changed successfully');\n        return { success: true };\n      } else {\n        toast.error(response.message || 'Password change failed');\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Password change failed';\n      toast.error(message);\n      return { success: false, message };\n    }\n  };\n\n  // Forgot password function\n  const forgotPassword = async (email) => {\n    try {\n      const response = await authAPI.forgotPassword(email);\n      \n      if (response.success) {\n        toast.success('Password reset email sent');\n        return { success: true };\n      } else {\n        toast.error(response.message || 'Failed to send reset email');\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Failed to send reset email';\n      toast.error(message);\n      return { success: false, message };\n    }\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\n  };\n\n  // Context value\n  const value = {\n    user: state.user,\n    token: state.token,\n    loading: state.loading,\n    error: state.error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    forgotPassword,\n    clearError,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
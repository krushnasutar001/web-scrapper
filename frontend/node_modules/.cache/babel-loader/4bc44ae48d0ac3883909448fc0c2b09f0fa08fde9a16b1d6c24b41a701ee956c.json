{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krush\\\\OneDrive\\\\Desktop\\\\Final\\\\linkedin-automation-saas\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  token: null,\n  loading: true,\n  error: null\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGOUT: 'LOGOUT',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER'\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Load user from localStorage on app start - FIXED VERSION\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('authToken') || localStorage.getItem('token');\n        const userStr = localStorage.getItem('user');\n        console.log(' Loading user from localStorage...');\n        console.log('Token exists:', !!token);\n        console.log('User data exists:', !!userStr);\n        if (token && userStr) {\n          try {\n            const user = JSON.parse(userStr);\n\n            // Set token in API headers\n            authAPI.setAuthToken(token);\n\n            // Instead of calling /api/auth/me, just use stored user data\n            // and let the API interceptor handle token validation on actual API calls\n            dispatch({\n              type: AUTH_ACTIONS.LOGIN_SUCCESS,\n              payload: {\n                user,\n                token\n              }\n            });\n            console.log('✅ User loaded from localStorage:', user.email);\n          } catch (parseError) {\n            console.error('❌ Error parsing stored user data:', parseError);\n            // Clear invalid data\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            authAPI.clearAuthToken();\n            dispatch({\n              type: AUTH_ACTIONS.SET_LOADING,\n              payload: false\n            });\n          }\n        } else {\n          console.log(' No stored authentication data found');\n          dispatch({\n            type: AUTH_ACTIONS.SET_LOADING,\n            payload: false\n          });\n        }\n      } catch (error) {\n        console.error('❌ Error loading user:', error);\n        // Clear storage on any error\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        authAPI.clearAuthToken();\n        dispatch({\n          type: AUTH_ACTIONS.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    loadUser();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      console.log('🔐 Attempting login for:', email);\n      const result = await authAPI.login(email, password);\n      const data = result || {};\n      console.log(' Login response (normalized):', data);\n      if (data.success) {\n        const user = data.user || null;\n        const token = data.authToken || null;\n        const refreshToken = data.refreshToken || null;\n        console.log('🔐 Login successful, storing data...');\n        console.log('User:', user);\n        console.log('Auth Token length:', token === null || token === void 0 ? void 0 : token.length);\n        console.log('Refresh Token length:', refreshToken === null || refreshToken === void 0 ? void 0 : refreshToken.length);\n\n        // Store in localStorage\n        localStorage.setItem('authToken', token);\n        localStorage.setItem('token', token); // keep legacy key for compatibility\n        localStorage.setItem('refreshToken', refreshToken);\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Set token in API headers\n        authAPI.setAuthToken(token);\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: {\n            user,\n            token\n          }\n        });\n        toast.success('Login successful!');\n        return {\n          success: true\n        };\n      } else {\n        console.error('❌ Login failed:', data.message);\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: data.message || 'Login failed'\n        });\n        toast.error(data.message || 'Login failed');\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data, _error$response3, _error$response3$data;\n      console.error('❌ Login error:', error);\n      console.error('❌ Error response:', error.response);\n      console.error('❌ Error data:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      let message = 'Login failed';\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error) {\n        message = error.response.data.error;\n      } else if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.message) {\n        message = error.response.data.message;\n      } else if (error.message) {\n        message = error.message;\n      }\n      console.error('❌ Final error message:', message);\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: message\n      });\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const response = await authAPI.register(userData);\n      if (response.success) {\n        const {\n          user,\n          accessToken,\n          refreshToken\n        } = response.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', accessToken);\n        localStorage.setItem('refreshToken', refreshToken);\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Set token in API headers\n        authAPI.setAuthToken(accessToken);\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: {\n            user,\n            token: accessToken\n          }\n        });\n        toast.success('Registration successful!');\n        return {\n          success: true\n        };\n      } else {\n        console.error('❌ Registration failed:', response.message);\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: response.message || 'Registration failed'\n        });\n        toast.error(response.message || 'Registration failed');\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Registration failed';\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: message\n      });\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Call logout API if available\n      await authAPI.logout().catch(() => {});\n    } catch (error) {\n      // Ignore logout API errors\n    } finally {\n      // Always clear local state\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      localStorage.removeItem('refreshToken');\n      authAPI.clearAuthToken();\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Update user function\n  const updateUser = userData => {\n    const updatedUser = {\n      ...state.user,\n      ...userData\n    };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    dispatch({\n      type: AUTH_ACTIONS.UPDATE_USER,\n      payload: userData\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","toast","jsxDEV","_jsxDEV","initialState","user","token","loading","error","AUTH_ACTIONS","SET_LOADING","LOGIN_SUCCESS","LOGOUT","SET_ERROR","CLEAR_ERROR","UPDATE_USER","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","loadUser","localStorage","getItem","userStr","console","log","JSON","parse","setAuthToken","email","parseError","removeItem","clearAuthToken","login","password","result","data","success","authToken","refreshToken","length","setItem","stringify","message","_error$response","_error$response2","_error$response2$data","_error$response3","_error$response3$data","response","register","userData","accessToken","_error$response4","_error$response4$data","logout","catch","updateUser","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/krush/OneDrive/Desktop/Final/linkedin-automation-saas/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: null,\n  loading: true,\n  error: null,\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGOUT: 'LOGOUT',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER',\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null,\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n        error: null,\n      };\n    case AUTH_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null,\n      };\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: { ...state.user, ...action.payload },\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = createContext();\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Load user from localStorage on app start - FIXED VERSION\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('authToken') || localStorage.getItem('token');\n        const userStr = localStorage.getItem('user');\n        \n        console.log(' Loading user from localStorage...');\n        console.log('Token exists:', !!token);\n        console.log('User data exists:', !!userStr);\n        \n        if (token && userStr) {\n          try {\n            const user = JSON.parse(userStr);\n            \n            // Set token in API headers\n            authAPI.setAuthToken(token);\n            \n            // Instead of calling /api/auth/me, just use stored user data\n            // and let the API interceptor handle token validation on actual API calls\n            dispatch({\n              type: AUTH_ACTIONS.LOGIN_SUCCESS,\n              payload: {\n                user,\n                token,\n              },\n            });\n            \n            console.log('✅ User loaded from localStorage:', user.email);\n          } catch (parseError) {\n            console.error('❌ Error parsing stored user data:', parseError);\n            // Clear invalid data\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            authAPI.clearAuthToken();\n            dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\n          }\n        } else {\n          console.log(' No stored authentication data found');\n          dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\n        }\n      } catch (error) {\n        console.error('❌ Error loading user:', error);\n        // Clear storage on any error\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        authAPI.clearAuthToken();\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\n      \n      console.log('🔐 Attempting login for:', email);\n      \n      const result = await authAPI.login(email, password);\n      const data = result || {};\n      \n      console.log(' Login response (normalized):', data);\n      \n      if (data.success) {\n        const user = data.user || null;\n        const token = data.authToken || null;\n        const refreshToken = data.refreshToken || null;\n        \n        console.log('🔐 Login successful, storing data...');\n        console.log('User:', user);\n        console.log('Auth Token length:', token?.length);\n        console.log('Refresh Token length:', refreshToken?.length);\n        \n        // Store in localStorage\n        localStorage.setItem('authToken', token);\n        localStorage.setItem('token', token); // keep legacy key for compatibility\n        localStorage.setItem('refreshToken', refreshToken);\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        // Set token in API headers\n        authAPI.setAuthToken(token);\n        \n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: { user, token },\n        });\n        \n        toast.success('Login successful!');\n        return { success: true };\n      } else {\n        console.error('❌ Login failed:', data.message);\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: data.message || 'Login failed',\n        });\n        toast.error(data.message || 'Login failed');\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      console.error('❌ Login error:', error);\n      console.error('❌ Error response:', error.response);\n      console.error('❌ Error data:', error.response?.data);\n      \n      let message = 'Login failed';\n      if (error.response?.data?.error) {\n        message = error.response.data.error;\n      } else if (error.response?.data?.message) {\n        message = error.response.data.message;\n      } else if (error.message) {\n        message = error.message;\n      }\n      \n      console.error('❌ Final error message:', message);\n      dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: message });\n      toast.error(message);\n      return { success: false, message };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\n      \n      const response = await authAPI.register(userData);\n      \n      if (response.success) {\n        const { user, accessToken, refreshToken } = response.data;\n        \n        // Store in localStorage\n        localStorage.setItem('token', accessToken);\n        localStorage.setItem('refreshToken', refreshToken);\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        // Set token in API headers\n        authAPI.setAuthToken(accessToken);\n        \n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: { user, token: accessToken },\n        });\n        \n        toast.success('Registration successful!');\n        return { success: true };\n      } else {\n        console.error('❌ Registration failed:', response.message);\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: response.message || 'Registration failed',\n        });\n        toast.error(response.message || 'Registration failed');\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Registration failed';\n      dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: message });\n      toast.error(message);\n      return { success: false, message };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Call logout API if available\n      await authAPI.logout().catch(() => {});\n    } catch (error) {\n      // Ignore logout API errors\n    } finally {\n      // Always clear local state\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      localStorage.removeItem('refreshToken');\n      authAPI.clearAuthToken();\n      \n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Update user function\n  const updateUser = (userData) => {\n    const updatedUser = { ...state.user, ...userData };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    dispatch({ type: AUTH_ACTIONS.UPDATE_USER, payload: userData });\n  };\n\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}